service: aws-python

provider:
  name: aws
  runtime: python3.9
  versionFunctions: false
  stage: ${opt:stage,'dev'}
  region: ${opt:region,'us-east-1'}
  tracing:
    apiGateway: true
    lambda: true
  environment:
    SLACK_ALERTS_WEBHOOK: ${self:custom.environment.SLACK_ALERTS_WEBHOOK}


custom:
  customDomain:
    domainName: api.kindergartenil.com
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
  cognitoAuthorizerArn: arn:aws:cognito-idp:${aws:region}:${aws:accountId}:userpool/${aws:region}_PokjeshX3
  pythonRequirements:
    dockerizePip: non-linux
    usePipenv: false
  environment: ${file(env.yml):${self:provider.stage}, file(env.yml):default}

functions:
  GetChildData:
    handler: lambdas/children/get_child_data_lambda.get_child_data
    role: ChildrenRole
    events:
      - http:
          path: children
          method: get
          integration: lambda
          cors: true
          request:
            template: ${file(./request_apigateway.yml)}
          response: ${file(./response_apigateway.yml)}
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoAuthorizerArn}
    package:
      patterns:
        - 'lambdas/children/**'

  AddChildData:
    handler: lambdas/children/add_child_data_lambda.add_child_data
    role: ChildrenRole
    events:
      - http:
          path: children
          method: post
          integration: lambda
          cors: true
          request:
            template: ${file(./request_apigateway.yml)}
          response: ${file(./response_apigateway.yml)}
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoAuthorizerArn}
    package:
      patterns:
        - 'lambdas/children/**'

  UploadChildPhoto:
    handler: lambdas/children/get_upload_link_lambda.get_upload_link
    role: KindergartenRole
    events:
      - http:
          path: child/upload_photo_link
          method: get
          integration: lambda
          cors: true
          request:
            template: ${file(./request_apigateway.yml)}
          response: ${file(./response_apigateway.yml)}
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoAuthorizerArn}
    package:
      patterns:
        - 'lambdas/children/**'

  GetTeacherData:
    handler: lambdas/teacher/get_teacher_data_lambda.get_teacher_data
    role: TeacherRole
    events:
      - http:
          path: teacher
          method: get
          integration: lambda
          cors: true
          request:
            template: ${file(./request_apigateway.yml)}
          response: ${file(./response_apigateway.yml)}
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoAuthorizerArn}
    package:
      patterns:
        - 'lambdas/teacher/**'

  UpdateTeacherData:
    handler: lambdas/signup/signup_teacher_lambda.signup_teacher
    role: TeacherRole
    events:
      - http:
          path: teacher/signup
          method: put
          integration: lambda
          cors: true
          request:
            template: ${file(./request_apigateway.yml)}
          response: ${file(./response_apigateway.yml)}
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoAuthorizerArn}
    package:
      patterns:
        - 'lambdas/signup/**'

  UploadTeacherPhoto:
    handler: lambdas/teacher/get_upload_link_lambda.get_upload_link
    role: TeacherRole
    events:
      - http:
          path: teacher/upload_photo_link
          method: get
          integration: lambda
          cors: true
          request:
            template: ${file(./request_apigateway.yml)}
          response: ${file(./response_apigateway.yml)}
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoAuthorizerArn}
    package:
      patterns:
        - 'lambdas/teacher/**'

  CogintoPostConfirmation:
    handler: lambdas/cognito/cognito_post_confirmation_add_teacher_data_lambda.add_teacher_data
    role: TeacherRole
    package:
      patterns:
        - 'lambdas/cognito/**'



  GetKindergartenData:
    handler: lambdas/kindergarten/get_kindergarten_data_lambda.get_kindergarten_data
    role: KindergartenRole
    events:
      - http:
          path: kindergarten/info
          method: get
          integration: lambda
          cors: true
          request:
            template: ${file(./request_apigateway.yml)}
          response: ${file(./response_apigateway.yml)}
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoAuthorizerArn}
    package:
      patterns:
        - 'lambdas/kindergarten/**'


  GetKindergartenChildren:
    handler: lambdas/kindergarten/get_kindergarten_children_lambda.get_kindergarten_children
    role: KindergartenRole
    events:
      - http:
          path: kindergarten/group_chidren
          method: get
          integration: lambda
          cors: true
          request:
            template: ${file(./request_apigateway.yml)}
          response: ${file(./response_apigateway.yml)}
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoAuthorizerArn}
    package:
      patterns:
        - 'lambdas/kindergarten/**'

  AddAttendanceData:
    handler: lambdas/attendance/add_attendance_data_lambda.add_attendance_data
    role: AttendanceRole
    events:
      - http:
          path: attendance
          method: post
          integration: lambda
          cors: true
          request:
            template: ${file(./request_apigateway.yml)}
          response: ${file(./response_apigateway.yml)}
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoAuthorizerArn}
    package:
      patterns:
        - 'lambdas/attendance/**'

plugins:
  - serverless-dependson-plugin
  - serverless-python-requirements
  - serverless-plugin-stage-variables
  - serverless-domain-manager
resources:
  # roles
  - ${file(resources/iam/AttendanceRole.yml)}
  - ${file(resources/iam/ChildrenRole.yml)}
  - ${file(resources/iam/KindergartenRole.yml)}
  - ${file(resources/iam/TeacherRole.yml)}
  # dynamodb
  - ${file(resources/dynamodb/AttendanceData.yml)}
  - ${file(resources/dynamodb/ChildData.yml)}
  - ${file(resources/dynamodb/KindergartenData.yml)}
  - ${file(resources/dynamodb/TeacherData.yml)}

  # cognito
#  - ${file(resources/cognito/Kindergarten-02.yml)}
package:
  patterns:
    - '!node_modules/**'
    - '!lambdas/**'
    - '!tests/**'
    - '!resources/**'
    - 'lambdas/__init__.py'
    - 'shared/**'
    - 'utils/**'

  individually: true


